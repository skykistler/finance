rm(QQQ)
source('~/git/finance/ema.R')
View(GSPC)
plotEntries(GSPC)
source('~/git/finance/adjusting trend strategy.R')
name(GSPC)
as.name(GSPC)
as.symbol(GSPC)
class(GSPC)
deparse(subsitute(GSPC))
deparse(substitute(GSPC))
source('~/git/finance/adjusting trend strategy.R')
source('~/git/finance/adjusting trend strategy.R')
plot(GSPC, 20, 100, 300)
source('~/git/finance/adjusting trend strategy.R')
plot(GSPC, 20, 100, 300)
plotEntries(GSPC, 20, 100, 300)
source('~/git/finance/ema.R')
source('~/git/finance/adjusting trend strategy.R')
source('~/git/finance/adjusting trend strategy.R')
source('~/git/finance/adjusting yesterday strategy.R')
source('~/git/finance/adjusting yesterday strategy.R')
source('~/git/finance/adjusting yesterday strategy.R')
source('~/git/finance/adjusting yesterday strategy.R')
source('~/git/finance/adjusting yesterday strategy.R')
plotEntriesLag()
plotEntriesLag(recent=20, semirecent=100, general=300)
View(GSPC)
source('~/git/finance/adjusting yesterday strategy.R')
getSymbols('IBEX')
getSymbols('^IBEX')
plotEntriesLag(symbol=IBEX, recent=20, semirecent=100, general=300)
source('~/git/finance/adjusting yesterday strategy.R')
plotEntriesLag(symbol=IBEX, recent=20, semirecent=100, general=300)
getSymbols('OZRK')
plotEntriesLag(symbol=, recent=20, semirecent=100, general=300)
plotEntriesLag(symbol=OZRK, recent=20, semirecent=100, general=300)
View(OZRK)
plotEntriesLag(symbol=OZRK, recent=10, semirecent=100, general=200)
OZRK[::2015]
OZRK['::2015']
OZRK['2015::']
source('~/git/finance/adjusting yesterday strategy.R')
plotEntriesLag(symbol=OZRK, recent=10, semirecent=100, general=200)
source('~/git/finance/adjusting yesterday strategy.R')
plotEntriesLag(symbol=OZRK, recent=10, semirecent=100, general=200)
source('~/git/finance/adjusting yesterday strategy.R')
plotEntriesLag(symbol=OZRK, recent=10, semirecent=100, general=200)
source('~/git/finance/adjusting yesterday strategy.R')
plotEntriesLag(symbol=OZRK, recent=10, semirecent=100, general=200)
subset(OZRK, '::2015')
subset(OZRK, OZRK['::2015'])
source('~/git/finance/adjusting yesterday strategy.R')
plotEntriesLag(symbol=OZRK, recent=10, semirecent=100, general=200)
source('~/git/finance/adjusting yesterday strategy.R')
plotEntriesLag(symbol=OZRK, recent=10, semirecent=100, general=200)
source('~/git/finance/adjusting yesterday strategy.R')
source('~/git/finance/adjusting yesterday strategy.R')
plotEntriesLag(symbol=OZRK, recent=10, semirecent=100, general=200)
plotEntriesLag(symbol=OZRK, recent=5, semirecent=20, general=200)
plotEntriesLag(symbol=OZRK, recent=5, semirecent=10, general=100)
plotEntriesLag(symbol=OZRK, recent=5, semirecent=10, general=100, subset='2016::')
plotEntriesLag(symbol=OZRK, recent=5, semirecent=10, general=300, subset='2016::')
plotEntries(symbol=GSPC, recent=10, semirecent=50, general=200)
source('~/git/finance/adjusting trend strategy.R')
plotEntries(symbol=GSPC, recent=10, semirecent=50, general=200)
source('~/git/finance/adjusting trend strategy.R')
source('~/git/finance/adjusting trend strategy.R')
plotEntries(symbol=OZRK, recent=10, semirecent=50, general=200, 3)
View(OZRK)
plotEntries(symbol=OZRK, recent=10, semirecent=50, general=200, 1)
plotEntries(symbol=OZRK, recent=10, semirecent=50, general=200, 4)
source('~/git/finance/adjusting trend strategy.R')
plotEntries(symbol=OZRK, recent=10, semirecent=50, general=200, 4)
plotEntries(symbol=OZRK, recent=10, semirecent=50, general=200)
plotEntries(symbol=IBEX, recent=10, semirecent=50, general=200)
plotEntries(symbol=GSPC, recent=10, semirecent=50, general=200)
plotEntries(symbol=GSPC, recent=10, semirecent=20, general=100)
plotEntries(symbol=OZRK, recent=10, semirecent=20, general=100)
plotEntries(symbol=OZRK)
getSymbols('AAPL')
plotEntries(AAPL)
source('~/git/finance/adjusting trend strategy.R')
plotEntries(AAPL)
source('~/git/finance/adjusting trend strategy.R')
chartSeries(AAPL$AAPL.Close,
theme="white",
TA="
addEMA(50, col='black');
addEMA(200, col='blue');
addTA(GSPC.EMA.10 - GSPC.EMA.50, col='blue', type='h', legend='10-50 EMA');
addTA(GSPC.EMA.50 - GSPC.EMA.200, col='red', type='h', legend='50-200 EMA');
")
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
plotMA(GSPC)
plotMA(GSPC)
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
plotMA(AAPL)
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
chart_theme()
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
source('~/git/finance/ema.R')
plotMA(AAPL, 5, 10, 100)
plotMA(AAPL, 5, 10, 200)
plotMA(AAPL, 5, 70, 200)
plotMA(AAPL, 5, 70, 200, 5)
plotMA(AAPL, 5, 70, 200, 6)
source('~/git/finance/ema.R')
plotMA(subset='2015')
source('~/git/finance/ema.R')
plotMA(subset='2015')
plotMA(subset='2015', column=6)
plotMA(AAPL, subset='2015', column=6)
plotEntries(AAPL)
plotEntries(AAPL, column=6)
source('~/git/finance/adjusting trend strategy.R')
plotEntries(AAPL, column=6)
plotMA(AAPL, column=6)
source('~/git/finance/adjusting trend strategy.R')
plotMA(AAPL, column=6)
plotEntries(AAPL, column=6)
plotEntries(AAPL, column=6, subset='2015')
source('~/git/finance/adjusting trend strategy.R')
plotEntries(AAPL, column=6, subset='2015')
plotMA(AAPL, column=6, subset='2015')
plotMA(AAPL, column=6, subset='2016')
plotEntries(AAPL, column=6, subset='2016')
plotEntries(AAPL, column=6, subset='2016::')
plotMA(AAPL, column=6, subset='2016')
plotMA(AAPL, column=6, subset='2016::')
plotMA(AAPL, recent=5, semirecent=30, general=150, column=6, subset='2016::')
plotEntries(AAPL, recent=5, semirecent=30, general=150, column=6, subset='2016::')
plotEntries(AAPL, recent=7, semirecent=30, general=150, column=6, subset='2016::')
plotEntries(AAPL, recent=7, semirecent=30, general=150, column=6, subset='2016')
plotEntries(AAPL, recent=7, semirecent=30, general=150, column=6, subset='2016::')
plotEntries(AAPL, recent=7, semirecent=30, general=150, column=3, subset='2016::')
plotEntries(AAPL, recent=7, semirecent=30, general=150, column=6, subset='2016::')
plotEntries(AAPL, recent=7, semirecent=30, general=150, column=3, subset='2016::')
plotEntries(OZRK, recent=7, semirecent=30, general=150, column=3, subset='2016::')
plotEntries(OZRK, recent=7, semirecent=30, general=150, column=6, subset='2016::')
plotEntries(OZRK, recent=7, semirecent=30, general=100, column=6, subset='2016::')
plotEntries(OZRK, recent=7, semirecent=30, general=50, column=6, subset='2016::')
plotMA(OZRK, recent=7, semirecent=30, general=50, column=6, subset='2016::')
plotMA(OZRK, recent=7, semirecent=30, general=50, column=6, subset='2013::')
?add
?TTR::add
??add
library(TTR)
??quantmod::add
source('~/git/finance/exploring indicators.R')
??quantmod::add
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
getSymbols('STI')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
VWAP.Slow <- VWAP(price = GSPC$GSPC.Close, volume = GSPC$GSPC.Volume, n=100)
VWAP.Fast <- VWAP(price = GSPC$GSPC.Close, volume = GSPC$GSPC.Volume, n=20)
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
source('~/git/finance/exploring indicators.R')
library(dplyr)
test <- data.frame(days_to_x = rep(850:1, 100))
test %>% filter(days_to_x > 90 & days_to_x < (90 + 90))
test %>% filter(days_to_x > 90 & days_to_x < (90 + 90)) %>% View
source('~/git/finance/counter trends.R')
source('~/git/finance/counter trends.R')
??quantmod::add
source('~/git/finance/counter trends.R')
source('~/git/finance/counter trends.R')
source('~/git/finance/counter trends.R')
source('~/git/finance/counter trends.R')
source('~/git/finance/counter trends.R')
source('~/git/finance/counter trends.R')
source('~/git/finance/counter trends RSI.R')
source('~/git/finance/counter trends RSI.R')
source('~/git/finance/counter trends RSI.R')
source('~/git/finance/counter trends RSI.R')
source('~/git/finance/counter trends RSI.R')
source('~/git/finance/counter trends RSI.R')
source('~/git/finance/counter trends RSI.R')
View(AAPL)
source('~/git/finance/counter trends RSI.R')
source('~/git/finance/mu.R')
source('~/git/finance/mu.R')
source('~/git/finance/mu.R')
update.packages()
y
y
y
y
update.packages()
update.packages()
source('~/git/finance/mu.R')
addSMA(n=20)
chartSeries(MU, theme='white', subset='2010::')
chartSeries(MU, theme='white', subset='2010::')
addSMA(n=20)
addSMA(n=200)
addROC(n=200)
addRSI(n=20)
addRSI(n=50)
chartSeries(MU, theme='white', subset='2010::')
addSMA(n=20)
addSMA(n=200)
addROC(n=200)
addRSI(n=50)
chartSeries(MU, type="candlesticks", theme='white', subset='2010::')
chartSeries(MU, type="matchsticks", theme='black', subset='2010::')
chartSeries(MU, type="matchsticks", theme='black', subset='2010::', TA=NULL)
addRSI(n=50)
addSMA(n=20)
addSMA(n=200)
addRSI(n=100)
addRSI(n=200)
chartSeries(MU, type="matchsticks", theme='black', subset='2010::', TA=NULL)
addRSI(n=1)
chartSeries(MU, type="matchsticks", theme='black', subset='2012::', TA=NULL)
addRSI(n=5)
quantmod::add?
``
quantmod::add
?quantmod::add
??quantmod::add
addCCI()
chartSeries(MU, type="matchsticks", theme='black', subset='2012::', TA=NULL)
addCCI()
??quantmod::add
addExpiry()
chartSeries(MU, type="matchsticks", theme='black', subset='2012::', TA=NULL)
addCCI(n=40)
source('~/git/finance/mu.R')
addCCI()
addCCI(5)
source('~/git/finance/mu.R')
source('~/git/finance/mu.R')
source('~/git/finance/mu.R')
source('~/git/finance/mu.R')
source('~/git/finance/mu.R')
getSymbols('MU')
chartSeries(MU, type="matchsticks", theme='black', subset='2014::', TA='addCCI();addCCI(5)')
getSymbols('MU')
library(qmao)
install.packages('qmao')
library(qmao)
source('~/git/finance/mu.R')
??quantmod::add
source('~/git/finance/mu.R')
source('~/git/finance/mu.R')
getSymbols('MU', src='google')
chartSeries(MU, type="matchsticks", theme='black', subset='2014::', TA='addCCI();addVo()')
chartSeries(MU, type="matchsticks", theme='black', subset='2017::', TA='addCCI();addVo()')
source('~/git/finance/mu.R')
source('~/git/finance/mu train.R')
MU.daily.test$prediction <- predictions$predict %>% as.numeric
MU.daily.test$prediction %>% length
MU.daily.test$prediction <- predictions$predict[1] %>% as.numeric
MU.daily.test$prediction <- predictions[[1]] %>% as.numeric
MU.daily.test$prediction %>% length
source('~/git/finance/mu train.R')
source('libraries.R')
h2o.init(nthreads=2)
getSymbols('MU', src='yahoo', from="2004-01-01", to="2017-07-08")
source('~/git/finance/mu train.R')
MU.daily.test$prediction %>% length
predictions <- h2o.predict(
h2o.getModel('MU.daily.dnn'),
MU.daily.test.h2o
) %>% h2o.as.numeric
predictions <- h2o.predict(
h2o.getModel('MU.daily.dnn'),
MU.daily.test.h2o
) %>% as.numeric.h2o
predictions <- h2o.predict(
h2o.getModel('MU.daily.dnn'),
MU.daily.test.h2o
) %>% asnumeric.h2o
predictions <- h2o.predict(
h2o.getModel('MU.daily.dnn'),
MU.daily.test.h2o
) %>% h2o.asnumeric
MU.daily.test$prediction <- predictions$predict
MU.daily.test$prediction %>% length
predictions
predictions$predict
predictions[[,1]]
summary(predictions)
predictions$predict
predictions$predict %>% h2o.asnumeric
predictions <- h2o.predict(
h2o.getModel('MU.daily.dnn'),
MU.daily.test.h2o
) %>% as.vector('numeric')
predictions
MU.daily.test$prediction <- h2o.predict(
h2o.getModel('MU.daily.dnn'),
MU.daily.test.h2o
) %>% as.vector('numeric')
plot(MU.daily.test$price, MU.daily.test$prediction)
MU.daily.test %>%
ggplot() %>%
geom_smooth(aes(y=price))
source('~/git/finance/libraries.R')
source('~/git/finance/libraries.R')
source('~/git/finance/mu train.R')
MU.daily.test %>%
ggplot() +
geom_smooth(aes(y=price))
MU.daily.test %>%
ggplot() +
geom_smooth(aes(x=rownames(MU.daily.test), y=price))
plot(MU.daily.test$prediction)
plot(MU.daily.test$prediction, type='l' )
plot(MU.daily.test$price, type='l')
plot(MU.daily.test$prediction, type='l' )
plot(MU.daily.test$price, type='l')
addLines(MU.daily.test$prediction, type='l' )
addLines(MU.daily.test$prediction )
plot(MU.daily.test$price, type='l')
lines(MU.daily.test$prediction )
plot(MU.daily.test$prediction, col='red')
plot(MU.daily.test$price, type='l')
par(new=TRUE)
plot(MU.daily.test$prediction, type='l', col='red')
source('~/git/finance/mu train.R')
MU.daily.test$prediction <- h2o.predict(
h2o.getModel('MU.daily.dnn'),
MU.daily.test.h2o
) %>% as.vector('numeric')
plot(MU.daily.test$price, type='l')
par(new=TRUE)
plot(MU.daily.test$prediction, type='l', col='red')
source('~/git/finance/mu train.R')
MU.daily.dnn <-
h2o.deeplearning(
x='price',
y=characteristics,
training_frame = MU.daily.train.h2o,
validation_frame = MU.daily.test.h2o,
model_id = 'MU.daily.dnn',
nfolds=3,
activation = "RectifierWithDropout",
hidden=c(200,200,200),
epochs=15,
seed=-1
)
source('~/git/finance/mu train.R')
h2o.removeAll()
source('~/git/finance/mu train.R')
plot(MU.daily.test$price, type='l')
par(new=TRUE)
plot(MU.daily.test$prediction, type='l', col='red')
goes.down <- MU.daily.test %>% filter(
lag(prediction, 2) < lag(prediction,1),
lag(price, 2) < lag(price,1)
)
View(goes.down)
source('~/git/finance/mu train.R')
rownames(MU)
rownames(MU$Data)
rownames(MU@Data)
MU['Data']
rownames(MU['Data'])
rownames(MU[,'Data'])
rownames(MU$Data)
MU
MU%>%View
MU %>% as.data.frame() %>% View
MU %>% as.data.frame() %>% rownames
source('~/git/finance/mu train.R')
View(goes.down)
goes.down <- MU.daily.test %>% filter(
lag(prediction, 1) < lag(prediction, 2),
lag(price, 1) < lag(price,2)
)
goes.down <- MU.daily.test %>% filter(
lag(prediction, 1) < lag(prediction, 2),
price < lag(price,1)
)
goes.up <- MU.daily.test %>% filter(
lag(prediction, 1) < lag(prediction, 2),
price > lag(price,1)
)
going.down <- MU.daily.test %>% filter(
lag(prediction, 1) > lag(prediction, 2),
price < lag(price,1)
)
going.up <- MU.daily.test %>% filter(
lag(prediction, 1) > lag(prediction, 2),
price > lag(price,1)
)
goes.down.agreement <- MU.daily.test %>% filter(
lag(prediction, 1) < lag(prediction, 2),
price < lag(price,1)
)
goes.down.disagreement <- MU.daily.test %>% filter(
lag(prediction, 1) < lag(prediction, 2),
price > lag(price,1)
)
goes.up.agreement <- MU.daily.test %>% filter(
lag(prediction, 1) > lag(prediction, 2),
price > lag(price,1)
)
goes.up.disagreement <- MU.daily.test %>% filter(
lag(prediction, 1) > lag(prediction, 2),
price < lag(price,1)
)
rm(goes.up)
rm(goes.down)
rm(going.down)
rm(going.up)
source('~/git/finance/mu train.R')
source('~/git/finance/mu train.R')
source('~/git/finance/mu train.R')
plot(y=MU.daily.test$price, x=MU.daily.test$date type='l')
plot(y=MU.daily.test$price, x=MU.daily.test$date, type='l')
MU.daily.test$date %<>% factor
plot(y=MU.daily.test$price, x=MU.daily.test$date, type='l')
plot(y=MU.daily.test$price, x=MU.daily.test$date, type='l')
par(new=TRUE)
plot(y=MU.daily.test$prediction, x=MU.daily.test$date, type='l', col='red')
ggplot(MU.daily.test, aes(x=MU.daily.test$date)) +
geom_line(aes(y=MU.daily.test$prediction), colour="red") +
geom_line(aes(y=MU.daily.test$price), colour="green")
ggplot(MU.daily.test, aes(x=MU.daily.test$date%>%as.numeric)) +
geom_line(aes(y=MU.daily.test$prediction), colour="red") +
geom_line(aes(y=MU.daily.test$price), colour="green")
View(MU.daily.test)
source('~/git/finance/mu train.R')
MU.daily <- data.frame(MU$MU.Adjusted, MU$MU.Volume, MU %>% as.data.frame() %>% rownames)
colnames(MU.daily) <- c('price', 'volume', 'date')
MU.daily %<>% rbind(
data.frame(price=NA, volume=NA, date='2017-07-10')
)
View(MU.daily)
MU.daily %<>%
mutate(
volume.lag    = lag(volume),
price.lag     = lag(price),
ema.20        = EMA(price.lag, n=20),
ema.20.diff   = price.lag - ema.20,
ema.50        = EMA(price.lag),
ema.50.diff   = price.lag - ema.50,
evwma.50      = EVWMA(price.lag, volume.lag, n=50),
evwma.50.diff = volume.lag - evwma.50,
ema.20.lag.5   = lag(ema.20.diff, n=5),
ema.50.lag.5   = lag(ema.50.diff, n=5),
evwma.50.lag.5 = lag(evwma.50.diff, n=5)
)
View(MU.daily)
source('~/git/finance/mu train.R')
ggplot(MU.daily.test, aes(x=MU.daily.test$date%>%as.numeric)) +
geom_line(aes(y=MU.daily.test$prediction), colour="red") +
geom_line(aes(y=MU.daily.test$price), colour="green")
source('~/git/finance/mu train.R')
source('~/git/finance/mu train.R')
ggplot(MU.daily.test, aes(x=MU.daily.test$date%>%as.numeric)) +
geom_line(aes(y=MU.daily.test$prediction), colour="red") +
geom_line(aes(y=MU.daily.test$price), colour="green") %>% print
ggplot(MU.daily.test, aes(x=MU.daily.test$date%>%as.numeric)) +
geom_line(aes(y=MU.daily.test$prediction), colour="red") +
geom_line(aes(y=MU.daily.test$price), colour="green")
ggplot(MU.daily.test, aes(x=MU.daily.test$date%>%as.numeric)) +
geom_line(aes(y=MU.daily.test$prediction+4), colour="red") +
geom_line(aes(y=MU.daily.test$price), colour="green")
source('~/git/finance/mu train.R')
ggplot(MU.daily.test, aes(x=MU.daily.test$date%>%as.numeric)) +
geom_line(aes(y=MU.daily.test$prediction+4), colour="red") +
geom_line(aes(y=MU.daily.test$price), colour="green")
ggplot(MU.daily.test, aes(x=MU.daily.test$date%>%as.numeric)) +
geom_line(aes(y=MU.daily.test$prediction), colour="red") +
geom_line(aes(y=MU.daily.test$price), colour="green")
source('~/git/finance/mu train.R')
ggplot(MU.daily.test, aes(x=MU.daily.test$date%>%as.numeric)) +
geom_line(aes(y=MU.daily.test$prediction), colour="red") +
geom_line(aes(y=MU.daily.test$price), colour="green")
source('~/git/finance/mu/mu train.R')
source('~/git/finance/mu/mu train.R')
